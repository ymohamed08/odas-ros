# Configuration file for (16SoundUSB)

version = "2.1";

# Raw

raw: 
{

    fS = 16000;
    hopSize = 512;
    nBits = 32;
    nChannels = 16; 

    # Input with raw signal from microphones
    interface: {    #"arecord -l" OR "aplay --list-devices" to see the devices
        type = "soundcard";
        card = 1;
        device = 0;
        #type = "file";
        #path = "/home/introlab/catkin_ws/src/triangulation_multi_robots/audio_processing/experiment/10-03-2020/raw_audio_bank/MOVO10_v2.raw"; 
    }

}

# Mapping

mapping:
{

    map: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);

}

# General

general:
{
    
    epsilon = 1E-20;

    size:   #for fft calculation
    {
        hopSize = 128;      #shift size of the cross fft
        frameSize = 256;    #size of each fft of the cross fft 
    };
    
    samplerate:
    {
        mu = 16000;
        sigma2 = 0.01;
    };

    speedofsound:
    {
        mu = 343.0;
        sigma2 = 25.0;
    };

    mics = (
        #mu => (x, y, z) position of the center of the mic from the centre of the top plate of the robot
        #sigma => 3D uncertainty
        #direction => in use [good signs and good values => double checked]
        #angle => 3D used angle of the mic
        
        #sigma ok (could be a little bit better with some tweeking).

        # Microphone 1
        { 
            mu = ( +0.0295, +0.1471, +0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( +0.1969, +0.9804, +0.0000 );
            angle = ( 180.0, 180.0 );

        },

        # Microphone 2
        { 
            mu = ( +0.0836, +0.1246, -0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( +0.5571, +0.8304, +0.0000 );
            angle = ( 180.0, 180.0 );

        },

        # Microphone 3
        { 
            mu = ( +0.1249, +0.0831, +0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( +0.8325, +0.5540, +0.0000 );
            angle = ( 180.0, 180.0 );

        },

        # Microphone 4
        { 
            mu = ( +0.1472, +0.0290, -0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( +0.9811, +0.1933, +0.0000 );
            angle = ( 180.0, 180.0 );

        },

        # Microphone 5
        { 
            mu = ( +0.1471, -0.0295, +0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( +0.9804, -0.1969, +0.0000 );
            angle = ( 180.0, 180.0 );

        },

        # Microphone 6
        { 
            mu = ( +0.1246, -0.0836, -0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( +0.8304, -0.5571, +0.0000 );
            angle = ( 180.0, 180.0 );

        },

        # Microphone 7
        { 
            mu = ( +0.0831, -0.1249, +0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( +0.5540, -0.8325, +0.0000 );
            angle = ( 180.0, 180.0 );

        },

        # Microphone 8
        { 
            mu = ( +0.0290, -0.1472, -0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( +0.1933, -0.9811, +0.0000 );
            angle = ( 180.0, 180.0 );

        },

        # Microphone 9
        { 
            mu = ( -0.0295, -0.1471, +0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( -0.1969, -0.9804, +0.0000 );
            angle = ( 180.0, 180.0 );

        },

        # Microphone 10
        { 
            mu = ( -0.0836, -0.1246, -0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( -0.5571, -0.8304, +0.0000 );
            angle = ( 180.0, 180.0 );            

        },

        # Microphone 11
        { 
            mu = ( -0.1249, -0.0831, +0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( -0.8325, -0.5540, +0.0000 );
            angle = ( 180.0, 180.0 );

        },        

        # Microphone 12
        { 
            mu = ( -0.1472, -0.0290, -0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( -0.9811, -0.1933, +0.0000 );
            angle = ( 180.0, 180.0 );

        },         

        # Microphone 13
        { 
            mu = ( -0.1471, +0.0296, +0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( -0.9804, +0.1969, +0.0000 );
            angle = ( 180.0, 180.0 );

        },  

        # Microphone 14
        { 
            mu = ( -0.1246, +0.0836, -0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( -0.8304, +0.5571, +0.0000 );
            angle = ( 180.0, 180.0 );

        },       

        # Microphone 15
        { 
            mu = ( -0.0831, +0.1249, +0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( -0.5540, +0.8325, +0.0000 );
            angle = ( 180.0, 180.0 );

        },  

        # Microphone 16
        { 
            mu = ( -0.0290, +0.1472, -0.0150 ); 
            sigma2 = ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );
            direction = ( -0.1933, +0.9811, +0.0000 );
            angle = ( 180.0, 180.0 );

        }
          
        
    );

    # Spatial filter to include only a range of direction if required
    # (may be useful to remove false detections from the floor)
    spatialfilter:{
            #works fine, but could probebly be better with some tweeking
            direction = ( +0.000, +0.000, +1.000 );
            angle = (120.0, 130.0);

        };  

    nThetas = 181;
    gainMin = 0.25;

};

# Stationnary noise estimation

sne:
{
    
    b = 3;
    alphaS = 0.1;
    L = 150;
    delta = 3.0;
    alphaD = 0.1;

}

# Sound Source Localization

ssl:
{

    nPots = 4;
    nMatches = 10;
    probMin = 0.5;
    nRefinedLevels = 1;
    interpRate = 4;

    # Number of scans: level is the resolution of the sphere
    # and delta is the size of the maximum sliding window
    # (delta = -1 means the size is automatically computed)
    scans = (
        { level = 2; delta = -1; },
        { level = 4; delta = -1; }
    );

    # Output to export potential sources
    potential: {

        #format = "json";

        #interface: {
        #    type = "socket";
        #    ip = "127.0.0.1";
        #    port = 9002;
        #};

        format = "undefined";

        interface: {
           type = "blackhole";
        };

    };

};

# Sound Source Tracking

sst:
{  

    # Mode is either "kalman" or "particle"

    mode = "kalman";

    # Add is either "static" or "dynamic"

    add = "dynamic";

    # Parameters used by both the Kalman and particle filter

    active = (
        { weight = 1.0; mu = 0.3; sigma2 = 0.0025 }
    );

    inactive = (
        { weight = 1.0; mu = 0.15; sigma2 = 0.0025 }
    );

    sigmaR2_prob = 0.0025;
    sigmaR2_active = 0.0225;
    sigmaR2_target = 0.0025;
    Pfalse = 0.1;
    Pnew = 0.1;
    Ptrack = 0.8;

    theta_new = 0.9;
    N_prob = 5;
    theta_prob = 0.8;
    N_inactive = ( 150, 200, 250, 250 );
    theta_inactive = 0.9;

    # Parameters used by the Kalman filter only

    kalman: {

        sigmaQ = 0.1; #bigger=more reactive / smaller=more robust the noise
        
    };
   
    # Parameters used by the particle filter only

    particle: {

        nParticles = 1000;
        st_alpha = 2.0;
        st_beta = 0.04;
        st_ratio = 0.5;
        ve_alpha = 0.05;
        ve_beta = 0.2;
        ve_ratio = 0.3;
        ac_alpha = 0.5;
        ac_beta = 0.2;
        ac_ratio = 0.2;
        Nmin = 0.7;

    };

    target: ();    

    # Output to export tracked sources
    tracked: {

        format = "json";

        interface: {
            type = "socket";
            ip = "127.0.0.1";
            port = 9000;
        };

    };

}

sss:
{
    
    # Mode is either "dds", "dgss" or "dmvdr"

    mode_sep = "dds"; #delay and sum
    mode_pf = "ms";

    gain_sep = 1.0;
    gain_pf = 10.0;

    dds: {

    };

    dgss: {

        mu = 0.01;
        lambda = 0.5;

    };

    dmvdr: {

    };

    ms: {

        alphaPmin = 0.07;
        eta = 0.5;
        alphaZ = 0.8;        
        thetaWin = 0.3;
        alphaWin = 0.3;
        maxAbsenceProb = 0.9;
        Gmin = 0.01;
        winSizeLocal = 3;
        winSizeGlobal = 23;
        winSizeFrame = 256;

    };

    ss: {

        Gmin = 0.01;
        Gmid = 0.5;
        Gslope = 10.0;
        
    };

    separated: { #packaging and destination of the separated files

        fS = 16000;
        hopSize = 128;
        nBits = 32;        

        interface: {
            #type = "file";
            #path = "separated.raw";

            type = "socket";
            ip = "127.0.0.1";
            port = 10000;

            #type = "blackhole";
            #ip = "127.0.0.1";
            #port = 9000;
        }        

    };

    postfiltered: { #packaging and destination of the post filtered files

        fS = 16000;
        hopSize = 128;
        nBits = 32;        

        interface: {
            #type = "file";
            #path = "postfiltered.raw";

            #type = "socket";
            #ip = "127.0.0.1";
            #port = 10010;

            type = "blackhole";
            ip = "127.0.0.1";
            port = 9000;
        }        

    };

}

classify:
{
    
    frameSize = 1024;
    winSize = 3;
    tauMin = 32;
    tauMax = 200;
    deltaTauMax = 7;
    alpha = 0.3;
    gamma = 0.01;
    phiMin = 0.5;
    r0 = 0.2;    

    category: {
        #format = "json";
        format = "undefined";

        interface: {
            type = "blackhole";
            #type = "socket";
            #ip = "127.0.0.1";
            #port = 9001;
        }

    }

}
